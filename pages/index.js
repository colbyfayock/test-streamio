import { useEffect, useState, useRef } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import YouTube from 'react-youtube';

import { StreamChat } from 'stream-chat';
import { Chat, Channel, ChannelHeader, MessageInput, MessageInputSmall, VirtualizedMessageList, Window } from 'stream-chat-react';

import 'stream-chat-react/dist/css/index.css';
import styles from '../styles/Home.module.css'

const channelInfo = {
  id: `spacejelly-${Date.now()}`,
  name: 'Space Jelly',
  image: 'https://fay.io/w/colby-hug.jpg'
}

export default function Home() {
  const [user, setUser] = useState({});
  const [client, setClient] = useState();
  const [channel, setChannel] = useState();
  const [messages, setMessages] = useState([]);

  const videoRef = useRef();

  useEffect(() => {
    if ( !user.id ) return;

    (async function run() {

      // Initialize Client

      const client = StreamChat.getInstance(process.env.NEXT_PUBLIC_STREAM_API_KEY);

      setClient(client);

      // Get Token

      const { token } = await fetch('/api/token', {
        method: 'POST',
        body: JSON.stringify({
          id: user.id
        })
      }).then(r => r.json());

      setUser(prev => {
        return {
          ...prev,
          token
        }
      });

      // Connect User

      await client.connectUser(
        {
          id: user.id,
          name: user.id,
          image: 'https://picsum.photos/600/600',
        },
        token,
      );

      // Set the channel

      const channel = client.channel('livestream', channelInfo.id, {
        image: channelInfo.image,
        name: channelInfo.name,
      });

      setChannel(channel);
    })();

    return () => {

      // When unmounting, if we have a client at this point, disconnect the user

      if ( client ) {
        client.disconnectUser();
        setChannel(undefined);
      }
    }
  }, [user.id]);

  // Set up event handlers for listening to channel events

  useEffect(() => {
    if ( !channel ) return;
    const listenerMessageNew = channel.on('message.new', onNewMessage);
    return () => {
      listenerMessageNew.unsubscribe();
    }
  }, [channel])

  /**
   * onStart
   */

  function onStart() {
    const internalPlayer = videoRef.current.getInternalPlayer();

    internalPlayer.pauseVideo();
    internalPlayer.seekTo(0);
    internalPlayer.playVideo();
  }

  /**
   * onReplayStart
   */

  function onReplayStart() {
    const internalPlayer = videoRef.current.getInternalPlayer();

    internalPlayer.pauseVideo();
    internalPlayer.seekTo(0);
    internalPlayer.playVideo();

    // Create a unique channel instance to replay with

    const channel = client.channel('livestream', `${channelInfo.id}-replay-${Date.now()}`, {
      image: channelInfo.image,
      name: channelInfo.name,
    });

    setChannel(channel);

    syncChannelMessages(channel);
  }

  /**
   * syncChannelMessages
   */

  function syncChannelMessages(clientChannel) {
    const myInterval = setInterval(async () => {
      const internalPlayer = videoRef.current.getInternalPlayer();
      const time = await internalPlayer.getCurrentTime();

      const currentMessages = messages.filter(({ time: messageTime }) => {
        const diff = time - messageTime;
        return diff <= 1 && diff > 0
      });

      for ( let i = 0, messagesLen = currentMessages.length; i < messagesLen; i++ ) {
        const { message } = currentMessages[i];
        await clientChannel.sendMessage({
          text: message.text
        });
      }
    }, 1000);
  }

  /**
   * onNewMessage
   */

  async function onNewMessage(event) {
    const internalPlayer = videoRef.current.getInternalPlayer();
    const time = await internalPlayer.getCurrentTime();
    setMessages(prev => {
      return [
        ...prev,
        {
          message: event.message,
          time
        }
      ]
    })
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        <form onSubmit={(e) => {
          e.preventDefault();
          const id = Array.from(e.currentTarget.elements).find(({ name }) => name ==='userId').value;
          setUser({ id });
        }}>
          <input type="text" name="userId" />
          <button>Set User ID</button>
        </form>
        {user?.id && (
          <>
            <p>
              <button onClick={onStart}>Start</button>
              <button onClick={onReplayStart}>Replay</button>
            </p>

            <div className={styles.stream}>
              <YouTube ref={videoRef} videoId="aYZRRyukuIw" />

              {client && channel && (
                <Chat client={client} theme='livestream dark'>
                  <Channel channel={channel}>
                    <Window>
                      <ChannelHeader live />
                      <VirtualizedMessageList />
                      <MessageInput Input={MessageInputSmall} focus />
                    </Window>
                  </Channel>
                </Chat>
              )}
            </div>
          </>
        )}

      </main>
    </div>
  )
}
